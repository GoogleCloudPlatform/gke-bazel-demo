# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Instantiate the Bazel rules we use in this build file.
load("@angular//:index.bzl", "ng_module")
load("@build_bazel_rules_typescript//:defs.bzl", "ts_library", "ts_web_test_suite")
load("@io_bazel_rules_sass//:defs.bzl", "sass_binary")

# The package rule declares this directory as a Bazel package
# which scopes targets defined in this Build file under this package.
# The visibility parameter declares which packages can call targets
# in this package. In this case, we're saying anyone can call these targets.
# See https://docs.bazel.build/versions/master/be/functions.html#package
package(default_visibility = ["//visibility:public"])

# Compile Sass source files and produce css
# See https://github.com/bazelbuild/rules_sass
sass_binary(
    # the name of this target
    name = "hello-world-styles",
    # the source file for this Sass
    src = "hello-world.component.scss",
    # the dependencies needed to compile
    deps = ["//js-client/src/styles:shared"],
)

# Use Angular's ng tool to compile the source code into an NgModule
# It behaves the same as `ts_library` but with additional attributes
# See https://github.com/alexeagle/angular-bazel-example/wiki/Angular-rules#compiling-angular-templates
ng_module(
    name = "hello-world",
    # the sourcefiles used to compile
    srcs = [
        "hello-world.component.ts",
        "hello-world.module.ts",
    ],
    # the HTML and Sass targets that output assets
    # we use in this module
    assets = [
        ":hello-world.component.html",
        ":hello-world-styles",
    ],
    # the tsconfig to pass to the typescript compiler
    tsconfig = "//js-client/src:tsconfig.json",
    # other dependencies we need to compile this module
    deps = [
        "//js-client/src/lib",
        "//js-client/src/material",
        "@angular//packages/core",
        "@angular//packages/forms",
        "@angular//packages/router",
    ],
)

# A Typescript library to compose for running tests
# See https://github.com/bazelbuild/rules_typescript#compiling-typescript-ts_library
ts_library(
    name = "test_lib",
    testonly = 1,
    srcs = glob(["*.spec.ts"]),
    deps = [
        ":hello-world",
        "@angular//packages/core",
        "@angular//packages/core/testing",
        "@angular//packages/platform-browser",
        "@angular//packages/platform-browser-dynamic/testing",
        "@angular//packages/platform-browser/animations",
        "@npm//@types/jasmine",
        "@npm//@types/node",
    ],
)

# Typescript compiling our test suite
# See https://github.com/bazelbuild/rules_typescript
ts_web_test_suite(
    name = "test",
    srcs = ["@npm//node_modules/tslib:tslib.js"],
    # do not sort
    bootstrap = [
        "@npm//node_modules/zone.js:dist/zone-testing-bundle.js",
        "@npm//node_modules/reflect-metadata:Reflect.js",
        "//js-client/src:module-id.js",
    ],
    browsers = [
        "@io_bazel_rules_webtesting//browsers:chromium-local",
        # TODO(gregmagolan): re-enable firefox testing once fixed
        # See https://github.com/bazelbuild/rules_typescript/issues/296
        #"@io_bazel_rules_webtesting//browsers:firefox-local",
    ],
    deps = [
        ":test_lib",
    ],
)
