# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Instantiate the 'k8s_deploy' Bazel rule we need to use below
load("@k8s_deploy//:defaults.bzl", "k8s_deploy")

# The package rule declares this directory as a Bazel package
# which scopes targets defined in this Build file under this package.
# The visibility parameter declares which packages can call targets
# in this package. In this case, we're saying anyone can call these targets.
# See https://docs.bazel.build/versions/master/be/functions.html#package
package(default_visibility = ["//visibility:public"])

# For our dependencies that rely on being able to call `//install`
# we forward that target to `@nodejs//:yarn` to do the install.
# See https://docs.bazel.build/versions/master/be/general.html#alias
alias(
    name = "install",
    actual = "@nodejs//:yarn",
)

# Configure the K8s deployment for the Java API
# This is how we're able to call `bazel run //js-client:k8s.apply`
# in scripts/create.sh
# `k8s_deploy` is a rule we created with `k8s_defaults` in the WORKSPACE
# See https://github.com/bazelbuild/rules_k8s
k8s_deploy(
    # the name of our Bazel target we call in the create script
    name = "k8s",
    # the define cli flag is used for cluster, context and image_chroot
    # the name of our GKE cluster to deploy to
    # this is read from a variable we set in the create script
    cluster = "$(cluster)",
    # the name of the kubectl context to use for authentication
    # this is read from a variable we set in the create script
    context = "$(cluster)",
    # the name of our GCR image repo to push the image to
    # this is read from a variable we set in the create script
    image_chroot = "$(repo)",
    # what images to build, push to the registry, and deploy to k8s
    images = {
        # the image pushed to our "image_chroot" called "js-client"
        # with a label of "do_not_delete". You can set whatever label you'd like.
        # "do_not_delete" is a common string to prevent people from accidentally
        # deleting the image in the container registry.
        # ":app_image" is the Bazel target to be called to generate the image
        # see the above rule where we define the "app_image" target.
        "js-client:do_not_delete": "//js-client/src:angular_image",
    },
    # what YAML template should we use for the k8s deployment
    # See js-client/manifests/BUILD.bazel for how
    # we tell Bazel to export a file as a Bazel rule
    # This is called "template" because Bazel will generate the actual
    # deployment.yaml that includes the full path to the image we asked
    # Bazel to build and push to our registry. The path will be a specific
    # SHA for the image as well.
    template = "//js-client/manifests:deployment.yaml",
)
